<?xml version="1.0" encoding="UTF-8" ?>
<!-- SQL맵퍼파일은 xml이기 때문에 제일먼저 xml선언이 옵니다. -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  Mapper 인터페이스의 패키지 명과 이름을 namespace로 설정합니다. -->
<mapper namespace="com.gant.myhome.mybatis.mapper.BoardMapper">
     
     <!-- 
		1. 태크에 id 속성은 Mapper 인터페이스에 추가한 메서드명과 동일하게 작성됩니다.
		2. resultType속성은 연동시킬 메서드에 명시된 반환 타입을 작성해 줍니다.
		-->
     
  
      
    
<!-- Get the count of total boards -->
<select id="getListCount" resultType="int">
    SELECT COUNT(*) FROM boards
</select>

<!-- Get the board list with comments count -->
<select id="getBoardList" resultType="board">
    SELECT *
    FROM (
        SELECT ROW_NUMBER() OVER(ORDER BY BOARD_NOTICE DESC, BOARD_RE_REF DESC, BOARD_RE_SEQ ASC) AS rnum,
        boards.*, COALESCE(cnt, 0) AS cnt
        FROM boards
        LEFT OUTER JOIN (
            SELECT comment_board_num, COUNT(*) AS cnt
            FROM com
            GROUP BY comment_board_num
        ) com ON boards.BOARD_NUM = com.comment_board_num
    ) j
    WHERE j.rnum BETWEEN #{start} AND #{end}
</select>

<!-- Get the count of boards based on a search query -->
<select id="getSearchListCount" resultType="int">
    SELECT COUNT(*) FROM boards
    WHERE BOARD_SUBJECT LIKE CONCAT('%', #{search_name}, '%')
</select>

<!-- Get the list of boards based on a search query with comments count -->
<select id="getBoardSearchList" resultType="board">
    SELECT *
    FROM (
        SELECT ROW_NUMBER() OVER(ORDER BY BOARD_RE_REF DESC, BOARD_RE_SEQ ASC) AS rnum,
        boards.*, COALESCE(cnt, 0) AS cnt
        FROM boards
        LEFT OUTER JOIN (
            SELECT comment_board_num, COUNT(*) AS cnt
            FROM com
            GROUP BY comment_board_num
        ) com ON boards.BOARD_NUM = com.comment_board_num
        WHERE BOARD_SUBJECT LIKE CONCAT('%', #{search_name}, '%')
    ) j
    WHERE j.rnum BETWEEN #{start} AND #{end}
</select>

<!-- Check if a member is an admin -->
<select id="getadmindate" resultType="String">
    SELECT admin FROM members WHERE id = #{id}
</select>

<!-- Insert a new board -->
<insert id="insertBoard" useGeneratedKeys="true" keyProperty="board_num">
    INSERT INTO boards (
        BOARD_NUM, BOARD_NAME, BOARD_PASS, BOARD_SUBJECT, BOARD_CONTENT,
        BOARD_FILE, BOARD_ORIGINAL, BOARD_RE_REF, BOARD_RE_LEV, BOARD_RE_SEQ,
        BOARD_READCOUNT, BOARD_LIKE, BOARD_NOTICE, fontColor, fontSize, fontWeight
    )
    VALUES (
        (SELECT COALESCE(MAX(BOARD_NUM), 0) + 1 FROM boards),
        #{board_name}, #{board_pass}, #{board_subject}, #{board_content},
        #{board_file}, #{board_original}, (SELECT COALESCE(MAX(BOARD_NUM), 0) + 1 FROM boards),
        #{board_re_lev}, #{board_re_seq}, #{board_readcount}, #{board_like},
        #{board_notice}, #{fontColor}, #{fontSize}, #{fontWeight}
    )
</insert>

<!-- Update the board read count -->
<update id="setReadCountUpdate">
    UPDATE boards SET BOARD_READCOUNT = BOARD_READCOUNT + 1 WHERE BOARD_NUM = #{number}
</update>

<!-- Get the details of a board -->
<select id="getDetail" resultType="board">
    SELECT * FROM boards WHERE BOARD_NUM = #{number}
</select>

<!-- Check if a member has already liked a board -->
<select id="selectLike" resultType="String">
    SELECT id FROM boardLike WHERE id = #{id} AND board_num = #{board_num}
</select>

<insert id="insertLike">
    INSERT INTO boardLike
    (id,board_num,like_check)
    VALUES
    (#{id},#{board_num},'false')
</insert>

<select id="selectLikeCheck" resultType="String">
    SELECT like_check
    FROM boardLike
    WHERE id = #{id} AND board_num = #{board_num}
</select>

<select id="getprofileimg" resultType="String">
    SELECT profileimg
    FROM members
    WHERE id = #{BOARD_NAME}
</select>

<delete id="boardDelete">
    <![CDATA[
    DELETE FROM boards
    WHERE board_re_ref = #{board_re_ref}
    AND board_re_lev >= #{board_re_lev}
    AND board_re_seq >= #{board_re_seq}
    AND board_re_seq <= (
        COALESCE((
            SELECT MIN(board_re_seq)-1
            FROM boards
            WHERE board_re_ref = #{board_re_ref}
            AND board_re_lev = #{board_re_lev}
            AND board_re_seq > #{board_re_seq}
        ), (
            SELECT MAX(board_re_seq)
            FROM boards
            WHERE board_re_ref = #{board_re_ref}
        ))
    )
    ]]>
</delete>

<update id="BoardupdateLike">
    UPDATE boards
    SET BOARD_LIKE = BOARD_LIKE + #{update}
    WHERE board_num = #{board_num}
</update>

<update id="boardReplyUpdate">
    UPDATE boards
    SET BOARD_RE_SEQ = BOARD_RE_SEQ+1
    WHERE BOARD_RE_REF = #{board_re_ref}
    AND BOARD_RE_SEQ > #{board_re_seq}
</update>

<insert id="boardReply">
    <selectKey resultType="int" order="BEFORE" keyProperty="board_num">
        SELECT COALESCE(MAX(board_num),0)+1 FROM boards
    </selectKey>
    INSERT INTO boards
    (BOARD_NUM,     BOARD_NAME,   BOARD_PASS,  BOARD_SUBJECT,
    BOARD_CONTENT, BOARD_RE_REF,
    BOARD_RE_LEV,  BOARD_RE_SEQ, BOARD_READCOUNT,
    BOARD_LIKE , BOARD_NOTICE ,fontColor ,fontSize, fontWeight )
    VALUES
    (#{board_num} ,#{board_name}, #{board_pass}, #{board_subject},
    #{board_content},#{board_re_ref},
    #{board_re_lev}, #{board_re_seq}, #{board_readcount},
    #{board_like}, #{board_notice}, #{fontColor},#{fontSize},#{fontWeight}
    )
</insert>

<update id="boardModify">
    UPDATE boards
    SET
    BOARD_SUBJECT = #{board_subject},
    BOARD_PASS = #{board_pass},
    BOARD_CONTENT = #{board_content},
    BOARD_FILE = #{board_file},
    BOARD_ORIGINAL = #{board_original},
    BOARD_NOTICE = #{board_notice},
    fontColor = #{fontColor},
    fontSize = #{fontSize},
    fontWeight = #{fontWeight}
    WHERE BOARD_NUM = #{board_num}
</update>

<select id="getDeleteFileList" resultType="String">
    SELECT board_file
    FROM board_deletefile
</select>

<delete id="deleteFileList" parameterType="String">
    DELETE FROM board_deletefile
    WHERE board_file = #{filename}
</delete>
      
       
</mapper>
